import random
import math
import matplotlib.pyplot as plt

# ฟังก์ชั่นสำหรับโหลดข้อมูล
def load_data(file_name):
    with open(file_name, 'r') as file:
        data = file.readlines()
    dataset = []
    for line in data:
        line = line.strip().split(',')
        id_num = int(line[0])
        diagnosis = 1 if line[1] == 'M' else 0
        features = list(map(float, line[2:]))
        dataset.append((features, diagnosis))
    return dataset

# ฟังก์ชั่นสำหรับแบ่งข้อมูล
def split_data(data, test_size=0.1):
    random.shuffle(data)
    test_len = int(len(data) * test_size)
    return data[test_len:], data[:test_len]

# นิยามโครงสร้างของ Multilayer Perceptron
class MLP:
    def __init__(self, input_size, hidden_layers, output_size):
        self.layers = []
        previous_size = input_size
        for size in hidden_layers:
            self.layers.append([[random.uniform(-1, 1) for _ in range(previous_size + 1)] for _ in range(size)])
            previous_size = size
        self.layers.append([[random.uniform(-1, 1) for _ in range(previous_size + 1)] for _ in range(output_size)])

    def forward(self, inputs):
        for layer in self.layers:
            new_inputs = []
            for neuron in layer:
                activation = neuron[-1] + sum(w * i for w, i in zip(neuron[:-1], inputs))
                activation = max(min(activation, 100), -100)  # Clip activation to avoid overflow
                new_inputs.append(1.0 / (1.0 + math.exp(-activation)))  # Sigmoid activation
            inputs = new_inputs
        return inputs

    def predict(self, inputs):
        return self.forward(inputs)

# ฟังก์ชั่นสำหรับ Genetic Algorithm
def genetic_algorithm(pop_size, generations, mlp, data, test_data):
    population = [MLP(input_size=len(data[0][0]), hidden_layers=[5], output_size=1) for _ in range(pop_size)]
    accuracy_history = []

    for generation in range(generations):
        # ประเมินค่าความเหมาะสม
        fitness_scores = []
        for individual in population:
            correct = 0
            for features, label in test_data:
                prediction = individual.predict(features)[0]
                correct += int((prediction > 0.5) == label)
            fitness_scores.append(correct / len(test_data))

        accuracy = sum(fitness_scores) / len(fitness_scores)
        accuracy_history.append(accuracy)

        # เลือกพันธุ์
        mating_pool = []
        avg_score = sum(fitness_scores) / len(fitness_scores)
        for individual, score in zip(population, fitness_scores):
            if score > avg_score:
                mating_pool.append(individual)
        
        # ถ้าแม่พันธุ์ไม่พอให้ทำการเพิ่มเข้าไปในพูล
        if len(mating_pool) < 2:
            mating_pool = population

        # ผสมพันธุ์และกลายพันธุ์
        next_generation = []
        while len(next_generation) < pop_size:
            parent1, parent2 = random.sample(mating_pool, 2)
            child = MLP(input_size=len(data[0][0]), hidden_layers=[5], output_size=1)
            for l in range(len(parent1.layers)):
                for n in range(len(parent1.layers[l])):
                    if random.random() < 0.5:
                        child.layers[l][n] = parent1.layers[l][n]
                    else:
                        child.layers[l][n] = parent2.layers[l][n]
            next_generation.append(child)
        population = next_generation

    best_individual = max(population, key=lambda ind: sum(int((ind.predict(f)[0] > 0.5) == l) for f, l in test_data) / len(test_data))
    return best_individual, accuracy_history

# ทดสอบโปรแกรม
data = load_data('wdbc.data.txt')
train_data, test_data = split_data(data)
mlp = MLP(input_size=30, hidden_layers=[5], output_size=1)
trained_mlp, accuracy_history = genetic_algorithm(pop_size=20, generations=100, mlp=mlp, data=train_data, test_data=test_data)

# แสดงกราฟผลลัพธ์
plt.plot(accuracy_history)
plt.xlabel('Generations')
plt.ylabel('Accuracy')
plt.title('Genetic Algorithm Training Accuracy')
plt.show()

print("Train complete.")
